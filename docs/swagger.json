{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money Guard",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Money Guard app."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    }
  ],
  "tags": [
    {
      "name": "Transactions",
      "description": "Endpoints related to user transactions"
    },
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Registers a new user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registerUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Email already registered"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Authenticates user and returns access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "DostQnNbh03oNZNqN9Pnbs6EML/4ecEqeCvY3Cp+"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Wrong password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the user by clearing the session and cookies",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshUserSession",
        "description": "Refreshes the user session using cookies `sessionId` and `refreshToken`, returns a new access token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "MyeJuRjdczgBQBc5Fy941l8hk+vra5uChfBGrgSl"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Session not found or token expired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Session token expired"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get all transactions",
        "operationId": "getTransactions",
        "description": "Returns a paginated and filtered list of transactions for the authenticated user.\n",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "sum",
                "type",
                "category"
              ],
              "default": "date"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "minSum",
            "schema": {
              "type": "number"
            },
            "description": "Minimum transaction sum"
          },
          {
            "in": "query",
            "name": "maxSum",
            "schema": {
              "type": "number"
            },
            "description": "Maximum transaction sum"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "expense"
              ]
            },
            "description": "Transaction type"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Transaction category"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for filtering"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for filtering"
          },
          {
            "in": "query",
            "name": "comment",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comment content"
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully fetched transactions!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transaction"
                          }
                        },
                        "totalItems": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "perPage": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 25
                            }
                          }
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a new transaction",
        "description": "Creates a new income or expense transaction for the authenticated user.",
        "operationId": "createTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a transaction!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Not enough balance or invalid category"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update a transaction",
        "description": "Updates an existing transaction for the authenticated user.",
        "operationId": "updateTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the transaction to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sum": {
                    "type": "number",
                    "example": 2000
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "example": "income"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "Incomes",
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment"
                    ],
                    "example": "Incomes"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Updated comment"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2012-12-11T22:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a transaction!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or insufficient balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient balance for this transaction update"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "description": "Deletes a transaction belonging to the authenticated user and adjusts balance accordingly.",
        "operationId": "deleteTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the transaction to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction successfully deleted (no content)"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/summary": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get monthly transaction summary",
        "description": "Returns a summary of total transaction amounts grouped by category for a given month and year.",
        "operationId": "getMonthlySummary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "required": true,
            "schema": {
              "type": "string",
              "example": "04"
            },
            "description": "Month in 2-digit format (e.g., \"01\" for January)"
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025"
            },
            "description": "Year in 4-digit format"
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly transaction summary grouped by category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully fetched monthly summary!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "Products"
                          },
                          "total": {
                            "type": "number",
                            "example": 450
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid month or year"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "registerUserRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "John Barrer"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's unique email address",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password",
            "example": "qwerty12345"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "balance",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "objectId",
            "example": "68065a2bd63a4fbb007f405b"
          },
          "name": {
            "type": "string",
            "example": "John Barrer"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "balance": {
            "type": "number",
            "example": 0
          },
          "avatar": {
            "type": "string",
            "example": "https://example.com/images/avatar.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-21T14:46:03.450Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-21T14:46:03.450Z"
          }
        }
      },
      "loginUserRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "qwerty12345"
          }
        }
      },
      "transaction": {
        "type": "object",
        "required": [
          "userId",
          "sum",
          "type",
          "category",
          "date"
        ],
        "properties": {
          "userId": {
            "description": "User id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9",
            "readOnly": true
          },
          "sum": {
            "description": "Transaction sum",
            "type": "number",
            "example": 100
          },
          "type": {
            "description": "Type transaction",
            "type": "string",
            "enum": [
              "income",
              "expense"
            ]
          },
          "category": {
            "description": "Category transaction",
            "type": "string",
            "enum": [
              "Incomes",
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ]
          },
          "comment": {
            "description": "Comment transaction",
            "type": "string",
            "example": "Comment transaction"
          },
          "date": {
            "description": "Date transaction",
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "Contact created Date",
            "example": "2025-04-09T10:54:04.582+00:00",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact updated Date",
            "example": "2025-04-09T10:54:04.582+00:00",
            "readOnly": true
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Please provide Authorization header"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}